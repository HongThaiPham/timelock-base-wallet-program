addon "svm" {
    rpc_api_url = input.rpc_api_url
    network_id = input.network_id
}

signer "payer" "svm::secret_key" {
    description = "Pays fees for program deployments and operations"
    keypair_json = "~/.config/solana/id.json"
    // See documentation for other options (mnemonic, etc): https://docs.surfpool.run/iac/svm/signers
}
    
signer "authority" "svm::secret_key" {
    description = "Can upgrade programs and manage critical ops"
    keypair_json = "~/.config/solana/id.json"
}

signer "alice" "svm::web_wallet" {
    description = "This is Alice wallet"
}


variable "program" {
    description = "The program to to invoke."
    value = svm::get_program_from_anchor_project("timelock_base_wallet_program")
}

variable "token_program" {
    description = "The token program address. 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' for Token (default), 'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' for Token2022."
    value = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
    editable = true

}

variable "usdc_mint" {
    description = "The public key of the usdc_mint"
    value = "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v"
    editable = true
}


variable "init_usdc_amount" {
    description = "The amount of tokens in token account"
    value = 1000
    editable = true
}


action "setup_surfnet" "svm::setup_surfnet" {
    set_token_account {
        public_key = signer.payer.public_key
        token = "usdc"
        amount = variable.init_usdc_amount
        token_program = variable.token_program
        state = "initialized"
    }
}


variable "amount" {
    description = "The amount to lock"
    value = svm::sol_to_lamports(1)
    editable = true
}

variable "unlock_timestamp" {
    description = "The time to unlock"
    value = 1758301200
    editable = true
}

variable "vault_pda" {
    description = "vault pda"
    value = svm::find_pda(variable.program.program_id, [std::encode_hex("vault"), signer.alice.public_key, variable.amount, variable.unlock_timestamp])
}

variable "vault_pda_address" {
    description = "vault pda address"
    value = "HrkjUiwaHwiMAVghGKWjdFf95DwmohjoaMyQPvK5SCDC"
    editable = true
}

action "call_init_sol_lock" "svm::process_instructions" {
	signers = [signer.alice]
    instruction {
        program_idl = variable.program.idl
        instruction_name = "initialize_sol_lock"
        instruction_args = [variable.amount, variable.unlock_timestamp]
        signer {
            public_key = signer.alice.public_key
        }
        system_program {
            public_key = svm::system_program_id()
        }
    }
}


output "signature_init_sol_lock" {
    description = "The signature of the transaction"
    value = action.call_init_sol_lock.signature
}

variable "time_travel_body" {
    description = "time travel body"
    value = jq("{\"jsonrpc\": \"2.0\",\"id\": 1,\"method\": \"surfnet_timeTravel\",\"params\": [{\"absoluteTimestamp\": 1768301201000}]}",".")
    editable = true
}


action "time_travel" "std::send_http_request" {
    description = "time travel to unlock time"
    url = "http://127.0.0.1:8899"
    method = "POST"
    body = variable.time_travel_body
    depends_on = [action.call_init_sol_lock]
}

output "time_travel_status" {
    description = "time travel status"
    value = action.time_travel.status_code
}

action "call_withdraw_sol_lock" "svm::process_instructions" {
	signers = [signer.alice]
    instruction {
        program_idl = variable.program.idl
        instruction_name = "withdraw_sol_lock"
        signer {
            public_key = signer.alice.public_key
        }
        vault {
            public_key = variable.vault_pda_address
        }
    }
    depends_on = [action.time_travel]
}


output "signature_withdraw_sol_lock" {
    description = "The signature of the transaction"
    value = action.call_withdraw_sol_lock.signature
}


output "program_id" {
    description = "Program id"
    value = variable.program.program_id
}