addon "svm" {
    rpc_api_url = input.rpc_api_url
    network_id = input.network_id
}

signer "payer" "svm::secret_key" {
    description = "Pays fees for program deployments and operations"
    keypair_json = "~/.config/solana/id.json"
    // See documentation for other options (mnemonic, etc): https://docs.surfpool.run/iac/svm/signers
}
    
signer "authority" "svm::secret_key" {
    description = "Can upgrade programs and manage critical ops"
    keypair_json = "~/.config/solana/id.json"
}

variable "program" {
    description = "The program to to invoke."
    value = svm::get_program_from_anchor_project("timelock_base_wallet_program")
}

variable "token_program" {
    description = "The token program address. 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' for Token (default), 'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' for Token2022."
    value = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
    editable = true

}

variable "usdc_mint" {
    description = "The public key of the usdc_mint"
    value = "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v"
    editable = true
}

variable "init_usdc_amount" {
    description = "The amount of tokens in token account"
    value = 1000
    editable = true
}


action "setup_surfnet" "svm::setup_surfnet" {
    set_token_account {
        public_key = signer.payer.public_key
        token = variable.usdc_mint
        amount = variable.init_usdc_amount
        token_program = variable.token_program
    }
}


action "example" "std::send_http_request" {
  url = "http://localhost:8899"
  method = "GET"
}

output "status" {
  value = action.example.status_code
}


output "program_id" {
    description = "Program id"
    value = variable.program.idl.address
}